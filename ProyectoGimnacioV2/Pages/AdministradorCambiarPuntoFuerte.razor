
@page "/AdministradorCambiarPuntoFuerte"

<!DOCTYPE html>
<html>
<head>
    <title>Bienvenido a GYM FAST FORCE!</title>
    <link rel="stylesheet" href="styles.css" />
</head>
<body>
    <h1 class="title">Bienvenido a GYM FAST FORCE</h1>

    <h2>Mostrar Entrenadores</h2>
    <!-- Botón para cargar los datos de Entrenadores.csv -->
    <div>
        <button onclick="cargarEntrenadores()">Mostrar Entrenadores</button>
    </div>
    <br />

    <h2>Editar Datos CSV</h2>
    <p>Haz clic en los campos de la tabla para editar.</p>

    <!-- Tabla donde se mostrarán los datos -->
    <table id="csvTable" border="1" style="width: 100%; border-collapse: collapse;">
        <thead>
            <tr>
                <th>Usuario</th>
                <th>Contraseña</th>
                <th>Nombre</th>
                <th>Apellido</th>
                <th>ID</th>
                <th>Puntos fuertes</th>
                <th>Acciones</th> <!-- Columna para botones Editar/Guardar -->
            </tr>
        </thead>
        <tbody id="csvTableBody"></tbody>
    </table>

    <br />

    <!-- Botón para guardar los datos editados en el CSV -->
    <div>
        <button onclick="guardarCSV()">Guardar Tabla como CSV</button>
    </div>

    <br />

    <p id="currentTime"></p>
    <script src="script.js"></script>

    <script>
        let datosCSV = []; // Para almacenar los datos del CSV
        let encabezadoCSV = "Usuario;Contraseña;Nombre;Apellido;Id;Puntos fuertes"; // Encabezado específico

        // Función para cargar los datos de Entrenadores.csv
        async function cargarEntrenadores() {
            try {
                const respuesta = await fetch('/sample-data/Entrenadores.csv'); // Ruta al archivo de Entrenadores.csv
                if (!respuesta.ok) {
                    alert("No se pudo cargar el archivo de Entrenadores.");
                    return;
                }

                const contenido = await respuesta.text(); // Lee el contenido del archivo
                procesarCSVTexto(contenido); // Procesa el contenido del archivo CSV
            } catch (error) {
                alert("Hubo un problema al cargar el archivo.");
                console.error("Error al cargar el archivo", error);
            }
        }

        // Función para procesar el contenido del CSV, ignorando la primera línea (encabezado)
        function procesarCSVTexto(texto) {
            const lineas = texto.split("\n").filter((linea, index) => {
                // Omite la primera línea (encabezado) y las líneas vacías
                return index > 0 && linea.trim() !== "";
            });

            datosCSV = lineas.map(linea => linea.split(";")); // Divide las líneas en columnas y las almacena

            // Actualiza la tabla con los nuevos datos cargados
            mostrarDatosActualizados();
        }

        // Función para mostrar los datos actualizados en la tabla
        function mostrarDatosActualizados() {
            const tablaBody = document.getElementById("csvTableBody");
            tablaBody.innerHTML = ""; // Limpiar la tabla

            // Renderiza las filas de datos
            datosCSV.forEach(fila => {
                const filaTabla = document.createElement("tr");

                fila.forEach((columna, index) => {
                    const celda = document.createElement("td");
                    celda.contentEditable = true; // Hacer editable
                    celda.textContent = columna.trim();
                    filaTabla.appendChild(celda);
                });

                const celdaAcciones = document.createElement("td");
                const botonGuardar = document.createElement("button");
                botonGuardar.textContent = "Guardar";
                botonGuardar.onclick = function () { guardarCambios(filaTabla, fila); };
                celdaAcciones.appendChild(botonGuardar);
                filaTabla.appendChild(celdaAcciones);

                tablaBody.appendChild(filaTabla);
            });
        }

        // Función para guardar los cambios en una fila
        function guardarCambios(fila, columnas) {
            const celdas = fila.querySelectorAll("td");

            // Guardar los valores de las celdas editadas en el array
            for (let i = 0; i < celdas.length - 1; i++) { // Excluir la última celda de "acciones"
                columnas[i] = celdas[i].textContent.trim();
            }

            alert("Cambios guardados.");

            // Actualizar los datos en el array
            const filaIndex = datosCSV.findIndex((item) => item[4] === columnas[4]); // Usar el ID para encontrar la fila correcta
            if (filaIndex > -1) {
                datosCSV[filaIndex] = columnas; // Actualiza los datos
            }

            // Después de guardar, refrescar la tabla con los datos actualizados
            mostrarDatosActualizados();
        }

        // Función para guardar los datos editados como archivo CSV
        function guardarCSV() {
            let csvContent = encabezadoCSV + "\n"; // Incluye el encabezado de Entrenadores

            // Generar CSV a partir de los datos almacenados
            datosCSV.forEach(filaData => {
                csvContent += filaData.join(";") + "\n";
            });

            // Crear un archivo blob y descargarlo
            const blob = new Blob([csvContent], { type: "text/csv;charset=utf-8;" });
            const link = document.createElement("a");
            link.href = URL.createObjectURL(blob);
            link.download = "entradores_guardados.csv";
            link.click();
        }
    </script>
</body>
</html>


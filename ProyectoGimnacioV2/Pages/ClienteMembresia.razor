@page "/ClienteMembresia"

<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Bienvenido a GYM FAST FORCE</title>
    <link rel="stylesheet" href="styles.css" />
</head>
<body>
    <h1 class="title">Bienvenido a GYM FAST FORCE</h1>

    <h2>Mostrar Archivo CSV</h2>
    <div>
        <input type="file" id="csvFileInput" accept=".csv" onchange="procesarCSV(event)" />
        <button onclick="guardarCSV()">Guardar Tabla como CSV</button>
    </div>
    <br />

    <h2>Editar Datos CSV</h2>
    <p>Haz clic en los campos de la tabla para editar.</p>

    <!-- Tabla donde se mostrarán los datos -->
    <table id="csvTable" border="1" style="width: 100%; border-collapse: collapse;">
        <thead>
            <tr>
                <th>Usuario</th>
                <th>Contraseña</th>
                <th>Nombre</th>
                <th>Apellido</th>
                <th>ID</th>
                <th>Acciones</th>
            </tr>
        </thead>
        <tbody id="csvTableBody"></tbody>
    </table>

    <script src="script.js"></script>

    <script>
        let datosCSV = [];

        // Procesar archivo CSV sin bloquear el ciclo de vida de Blazor
        function procesarCSV(event) {
            const archivo = event.target.files[0];
            if (!archivo) {
                alert("Por favor seleccione un archivo CSV.");
                return;
            }

            // Usar FileReader asíncrono
            const lector = new FileReader();
            lector.onload = function (e) {
                const contenido = e.target.result;
                const lineas = contenido.split("\n");
                const tablaBody = document.getElementById("csvTableBody");
                tablaBody.innerHTML = ""; // Limpiar tabla

                datosCSV = []; // Reiniciar datos CSV

                for (let linea of lineas) {
                    if (linea.trim() === "") continue;

                    const columnas = linea.split(";");  // Ajustar según el separador usado en el CSV
                    if (columnas.length === 7 || columnas.length === 5) { // Diferentes tipos de archivos
                        datosCSV.push(columnas);

                        const fila = document.createElement("tr");
                        columnas.forEach((columna, index) => {
                            const celda = document.createElement("td");
                            celda.contentEditable = true; // Hacer editable
                            celda.textContent = columna.trim();
                            fila.appendChild(celda);
                        });

                        // Columna de Acciones (Guardar)
                        const celdaAcciones = document.createElement("td");
                        const botonGuardar = document.createElement("button");
                        botonGuardar.textContent = "Guardar";
                        botonGuardar.onclick = function () { guardarCambios(fila, columnas); };
                        celdaAcciones.appendChild(botonGuardar);
                        fila.appendChild(celdaAcciones);

                        tablaBody.appendChild(fila);
                    }
                }
            };

            lector.onerror = function () {
                alert("Hubo un problema al leer el archivo.");
            };

            lector.readAsText(archivo);
        }

        // Guardar cambios realizados en una fila
        function guardarCambios(fila, columnas) {
            const celdas = fila.querySelectorAll("td");

            // Guardar valores editados
            for (let i = 0; i < celdas.length - 1; i++) {
                columnas[i] = celdas[i].textContent.trim();
            }

            alert("Cambios guardados.");

            const filaIndex = datosCSV.findIndex((item) => item[4] === columnas[4]); // Buscar por ID
            if (filaIndex > -1) {
                datosCSV[filaIndex] = columnas;
            }
        }

        // Función para guardar CSV en el sistema
        function guardarCSV() {
            let csvContent = "";

            datosCSV.forEach(filaData => {
                csvContent += filaData.join(";") + "\n"; // Unir columnas con el separador adecuado
            });

            const blob = new Blob([csvContent], { type: "text/csv;charset=utf-8;" });
            const link = document.createElement("a");
            link.href = URL.createObjectURL(blob);
            link.download = "datos_guardados.csv";
            link.click();
        }
    </script>
</body>
</html>



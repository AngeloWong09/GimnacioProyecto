
@page "/AdministradorReportes"

<!DOCTYPE html>
<html>
<head>
    <title>Bienvenido a GYM FAST FORCE!</title>
    <link rel="stylesheet" href="styles.css" />
</head>
<body>
    <h1 class="title">Bienvenido a GYM FAST FORCE</h1>
    <!-- Botón Volver al Menú -->
    <div>
        <a href="/Administrador" class="btn-primary">Volver al Menú</a>  <!-- Redirige a la página de Administrador.razor -->
    </div> 

    <h2>Mostrar Archivo CSV</h2>
    <div>
        <!-- Botón para cargar y mostrar la tabla de Maquinas.csv -->
        <button onclick="mostrarTabla('maquinas')">Mostrar Tabla de Máquinas</button>
        <!-- Botón para cargar y mostrar la tabla de Clases.csv -->
        <button onclick="mostrarTabla('clases')">Mostrar Tabla de Clases</button>
    </div>
    <br />

    <!-- Botón para guardar el CSV -->
    <div>
        <button onclick="guardarCSV()">Guardar Tabla como CSV</button>
    </div>
    <br />

    <h2>Editar Datos CSV</h2>
    <p>Haz clic en los campos de la tabla para editar.</p>

    <!-- Tabla donde se mostrarán los datos -->
    <table id="csvTable" border="1" style="width: 100%; border-collapse: collapse;">
        <thead>
            <tr id="tablaHeaders"></tr>
        </thead>
        <tbody id="csvTableBody"></tbody>
    </table>

    <p id="currentTime"></p>
    <script src="script.js"></script>

    <script>
        let datosCSV = []; // Para almacenar los datos del CSV
        let tipoCSV = "";   // Para controlar el tipo de CSV cargado (máquinas o clases)

        // Función para cargar y mostrar el archivo CSV dependiendo de la opción seleccionada
        function mostrarTabla(tipo) {
            tipoCSV = tipo; // Guardar el tipo de archivo CSV a cargar

            // Usamos fetch para obtener el archivo correspondiente dependiendo del tipo
            let archivoCSV = tipo === 'maquinas' ? 'sample-data/Maquinas.csv' : 'sample-data/Clases.csv';

            fetch(archivoCSV)
                .then(response => response.text())
                .then(contenido => {
                    const lineas = contenido.split("\n");
                    const tablaBody = document.getElementById("csvTableBody");
                    tablaBody.innerHTML = ""; // Limpiar la tabla
                    datosCSV = []; // Reiniciar los datos del CSV

                    // Ajustamos los encabezados de acuerdo al tipo de CSV
                    const tablaHeaders = document.getElementById("tablaHeaders");
                    if (tipo === 'maquinas') {
                        tablaHeaders.innerHTML = `
                                    <th>Nombre</th>
                                    <th>Fecha Entrada</th>
                                    <th>Tiempo Vida (días)</th>
                                    <th>Ingresos</th>
                                    <th>Clase ID</th>
                                    <th>ID</th>
                                    <th>Acciones</th>`; // Encabezado para "Maquinas.csv"
                    } else if (tipo === 'clases') {
                        tablaHeaders.innerHTML = `
                                    <th>Num Clase</th>
                                    <th>ID Clase</th>
                                    <th>ID Entrenador</th>
                                    <th>Clase</th>
                                    <th>Fecha</th>
                                    <th>Horario</th>
                                    <th>Cupos</th>
                                    <th>Precio Clase</th>
                                    <th>Acciones</th>`; // Encabezado para "Clases.csv"
                    }

                    // Iterar sobre las líneas del CSV
                    lineas.forEach((linea, index) => {
                        if (linea.trim() === "" || index === 0) return; // Ignorar líneas vacías o la primera línea (encabezado)

                        const columnas = tipo === 'maquinas' ? linea.split(",") : linea.split(";");
                        datosCSV.push(columnas);

                        const fila = document.createElement("tr");

                        columnas.forEach((columna) => {
                            const celda = document.createElement("td");
                            celda.contentEditable = true; // Hacer las celdas editables
                            celda.textContent = columna.trim();
                            fila.appendChild(celda);
                        });

                        // Añadir la celda de "Acciones"
                        const celdaAcciones = document.createElement("td");
                        const botonGuardar = document.createElement("button");
                        botonGuardar.textContent = "Guardar";
                        botonGuardar.onclick = function () { guardarCambios(fila, columnas); };
                        celdaAcciones.appendChild(botonGuardar);
                        fila.appendChild(celdaAcciones);

                        tablaBody.appendChild(fila);
                    });
                })
                .catch(error => {
                    alert("Hubo un problema al cargar el archivo " + tipo + ".csv.");
                });
        }

        // Función para guardar los cambios en una fila
        function guardarCambios(fila, columnas) {
            const celdas = fila.querySelectorAll("td");

            // Guardar los valores de las celdas editadas en el array
            for (let i = 0; i < celdas.length - 1; i++) { // Excluir la última celda de "acciones"
                columnas[i] = celdas[i].textContent.trim();
            }

            alert("Cambios guardados.");

            // Actualizar los datos en el array
            const filaIndex = datosCSV.findIndex((item) => item[item.length - 1] === columnas[columnas.length - 1]); // Usar el "ID" para encontrar la fila correcta
            if (filaIndex > -1) {
                datosCSV[filaIndex] = columnas; // Actualiza los datos
            }
        }

        // Función para guardar los datos de la tabla como archivo CSV
        function guardarCSV() {
            let csvContent = tipoCSV === 'maquinas'
                ? "Nombre,FechaEntrada,TiempoVida,Ingresos,Clase ID,ID\n"
                : "Num Clase;ID Clase;ID Entrenador;Clase;Fecha;Horario;Cupos ;Precio Clase\n"; // Añadimos los encabezados nuevamente dependiendo del tipo

            // Generar CSV a partir de los datos almacenados
            datosCSV.forEach(filaData => {
                csvContent += filaData.join(tipoCSV === 'maquinas' ? "," : ";") + "\n"; // Separar por coma o punto y coma dependiendo del archivo
            });

            // Crear un archivo blob y descargarlo
            const blob = new Blob([csvContent], { type: "text/csv;charset=utf-8;" });
            const link = document.createElement("a");
            link.href = URL.createObjectURL(blob);
            link.download = tipoCSV === 'maquinas' ? "Maquinas_guardadas.csv" : "Clases_guardadas.csv";
            link.click();
        }
    </script>
</body>
</html>

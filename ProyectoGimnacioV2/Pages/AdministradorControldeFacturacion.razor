
@page "/AdministradorControldeFacturacion"
@inject NavigationManager Navigation
@inject IJSRuntime JS
@using ProyectoGimnacioV2.Clases

<h3>Control de Facturación</h3>

<!-- Botones para cambiar entre tipos de facturas -->
<div class="mb-3">
    <button class="btn btn-info" @onclick="CargarFacturasEntrenador">Facturas de Entrenador</button>
    <button class="btn btn-info" @onclick="CargarFacturasCliente">Facturas Cliente</button>
    <button class="btn btn-info" @onclick="CargarFacturasMaquinas">Facturas Maquinas</button>
</div>

<!-- Tabla de Facturas -->
<table class="table table-bordered" id="facturaTable">
    <thead>
        <tr>
            <th>Id</th>
            <th>Cliente</th>
            <th>Detalle</th>
            <th>Monto</th>
            <th>Fecha</th>
            <th>Estado</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var factura in facturas)
        {
            <tr>
                <td>@factura.Id</td>
                <td>@factura.ClienteNombre</td>
                <td>@factura.Detalle</td>
                <td>@factura.Monto:C</td>
                <td>@factura.Fecha.ToShortDateString()</td>
                <td>@factura.Estado</td>
            </tr>
        }
    </tbody>
</table>

<!-- Botones de funcionalidad -->
<div class="mt-3">
    <button class="btn btn-success" @onclick="GuardarTablaComoTXT">Guardar en TXT</button>
    <button class="btn btn-primary" @onclick="GoToAdministrador">Regresar a Administrador</button>
</div>

@code {
    private List<Factura> facturas;

    protected override void OnInitialized()
    {
        // Cargar facturas por defecto (ejemplo: Cliente)
        facturas = Facturas.ObtenerFacturasCliente();
    }

    // Métodos para cargar diferentes tipos de facturas
    private void CargarFacturasEntrenador()
    {
        facturas = Facturas.ObtenerFacturasEntrenador();
    }

    private void CargarFacturasCliente()
    {
        facturas = Facturas.ObtenerFacturasCliente();
    }

    private void CargarFacturasMaquinas()
    {
        facturas = Facturas.ObtenerFacturasMaquinas();
    }

    // Método para regresar a la página del administrador
    private void GoToAdministrador()
    {
        Navigation.NavigateTo("/Administrador");
    }

    // Método para guardar la tabla mostrada en pantalla como archivo TXT
    private async Task GuardarTablaComoTXT()
    {
        // Concatenar las facturas de los tres tipos
        var facturasCompletas = new List<Factura>();
        facturasCompletas.AddRange(Facturas.ObtenerFacturasCliente());
        facturasCompletas.AddRange(Facturas.ObtenerFacturasEntrenador());
        facturasCompletas.AddRange(Facturas.ObtenerFacturasMaquinas());

        // Construir el contenido TXT solo con los datos actualmente visibles
        var txtContent = "Id\tCliente\tDetalle\tMonto\tFecha\tEstado\n";
        foreach (var factura in facturasCompletas)
        {
            txtContent += $"{factura.Id}\t{factura.ClienteNombre}\t{factura.Detalle}\t{factura.Monto:C}\t{factura.Fecha.ToShortDateString()}\t{factura.Estado}\n";
        }

        // Usar JavaScript para descargar el archivo
        await JS.InvokeVoidAsync("downloadFile", new { Content = txtContent, ContentType = "text/plain", FileName = "Facturas_Completas.txt" });
    }
}


@page "/AdministradorControldeFacturacion"
@inject NavigationManager Navigation

<!DOCTYPE html>
<html lang="es">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Bienvenido a GYM FAST FORCE!</title>
    <link rel="stylesheet" href="styles.css" />
</head>

<body>
    <!-- Botón Volver al Menú -->
    <div>
        <a href="/Administrador" class="btn-primary">Volver al Menú</a>  <!-- Redirige a la página de Administrador.razor -->
    </div>

    <!-- Mostrar Datos de Pagos -->
    <h2>Mostrar Datos de Pagos</h2>
    <div>
        <!-- Botón para cargar los pagos -->
        <button onclick="cargarPagos()">Mostrar Pagos</button>
    </div>

    <br />

    <!-- Filtro de mes -->
    <div>
        <label for="mesFiltro">Filtrar por Mes:</label>
        <select id="mesFiltro" onchange="filtrarPorMes()">
            <option value="">Todos</option>
            <option value="Enero 2024">Enero 2024</option>
            <option value="Febrero 2024">Febrero 2024</option>
            <option value="Marzo 2024">Marzo 2024</option>
            <option value="Abril 2024">Abril 2024</option>
            <option value="Mayo 2024">Mayo 2024</option>
            <option value="Junio 2024">Junio 2024</option>
            <option value="Julio 2024">Julio 2024</option>
            <option value="Agosto 2024">Agosto 2024</option>
            <option value="Septiembre 2024">Septiembre 2024</option>
            <option value="Octubre 2024">Octubre 2024</option>
            <option value="Noviembre 2024">Noviembre 2024</option>
            <option value="Diciembre 2024">Diciembre 2024</option>
        </select>
    </div>

    <br />

    <!-- Botón para guardar el CSV -->
    <div>
        <button onclick="guardarCSV()">Guardar Tabla Filtrada como CSV</button>
    </div>

    <!-- Botón para agregar una nueva fila -->
    <br />
    <div>
        <button onclick="agregarFila()">Agregar Nueva Fila</button>
    </div>
    <br />

    <h2>Editar Datos CSV</h2>
    <p>Haz clic en los campos de la tabla para editar.</p>

    <!-- Tabla donde se mostrarán los datos -->
    <table id="csvTable" border="1" style="width: 100%; border-collapse: collapse;">
        <thead>
            <tr>
                <th>FacturaId</th>
                <th>UsuarioId</th>
                <th>MesPago</th>
                <th>Monto</th>
                <th>FechaEmisión</th>
                <th>FechaVencimiento</th>
                <th>EstadoFactura</th>
                <th>Clase</th>
                <th>Acciones</th> <!-- Columna para botones Editar/Guardar -->
            </tr>
        </thead>
        <tbody id="csvTableBody"></tbody>
    </table>

    <p id="currentTime"></p>

    <script src="script.js"></script>

    <script>
        let datosCSV = []; // Para almacenar los datos del CSV
        let datosFiltrados = []; // Para almacenar las filas filtradas

        // Función para cargar el archivo CSV y mostrar sus datos en la tabla
        async function cargarPagos() {
            try {
                // Realiza la solicitud de los datos desde el archivo
                const respuesta = await fetch('/sample-data/Pagos.csv');
                if (!respuesta.ok) throw new Error("No se pudo cargar el archivo de pagos.");

                const contenido = await respuesta.text(); // Obtiene el contenido del CSV
                procesarCSVTexto(contenido); // Procesa el contenido cargado
            } catch (error) {
                alert("Hubo un problema al cargar el archivo.");
                console.error("Error al cargar el archivo:", error);
            }
        }

        // Procesa el contenido del archivo CSV
        function procesarCSVTexto(texto) {
            const lineas = texto.split("\n").filter((linea, index) => index > 0 && linea.trim() !== "");

            // Limpiar datos anteriores
            datosCSV = [];
            datosFiltrados = [];

            // Crear la tabla con los datos cargados
            lineas.forEach(linea => {
                const columnas = linea.split(";");
                datosCSV.push(columnas);
                datosFiltrados.push(columnas);

                const fila = document.createElement("tr");
                columnas.forEach(columna => {
                    const celda = document.createElement("td");
                    celda.contentEditable = true;
                    celda.textContent = columna.trim();
                    fila.appendChild(celda);
                });

                // Añadir botón "Guardar"
                const celdaAcciones = document.createElement("td");
                const botonGuardar = document.createElement("button");
                botonGuardar.textContent = "Guardar";
                botonGuardar.onclick = () => guardarCambios(fila, columnas);
                celdaAcciones.appendChild(botonGuardar);
                fila.appendChild(celdaAcciones);

                document.getElementById("csvTableBody").appendChild(fila);
            });
        }

        // Función para guardar los cambios realizados en la tabla
        function guardarCambios(fila, columnas) {
            const celdas = fila.querySelectorAll("td");
            for (let i = 0; i < celdas.length - 1; i++) { // Excluyendo la última celda (acciones)
                columnas[i] = celdas[i].textContent.trim(); // Actualizar la fila
            }

            alert("Cambios guardados.");
            // Actualizar el arreglo con los cambios realizados
            const filaIndex = datosCSV.findIndex(item => item[0] === columnas[0]);
            if (filaIndex > -1) {
                datosCSV[filaIndex] = columnas;
            }
        }

        // Función para filtrar las filas por mes
        function filtrarPorMes() {
            const mesSeleccionado = document.getElementById("mesFiltro").value;
            const tablaBody = document.getElementById("csvTableBody");
            tablaBody.innerHTML = ""; // Limpiar la tabla

            // Filtrar las filas por mes
            const facturasFiltradas = mesSeleccionado ?
                datosCSV.filter(fila => fila[2].includes(mesSeleccionado)) : datosCSV;

            facturasFiltradas.forEach(fila => {
                const row = document.createElement("tr");
                fila.forEach((columna) => {
                    const celda = document.createElement("td");
                    celda.textContent = columna.trim();
                    row.appendChild(celda);
                });

                // Botón de acción "Guardar"
                const celdaAcciones = document.createElement("td");
                const botonGuardar = document.createElement("button");
                botonGuardar.textContent = "Guardar";
                botonGuardar.onclick = () => guardarCambios(row, fila);
                celdaAcciones.appendChild(botonGuardar);
                row.appendChild(celdaAcciones);

                tablaBody.appendChild(row);
            });
        }

        // Función para guardar la tabla filtrada como un archivo CSV
        function guardarCSV() {
            let csvContent = "";
            const tablaBody = document.getElementById("csvTableBody");

            // Generar CSV con las filas visibles (filtradas)
            Array.from(tablaBody.rows).forEach(row => {
                const filaData = Array.from(row.cells).map(cell => cell.textContent.trim());
                csvContent += filaData.join(";") + "\n";
            });

            // Crear un Blob y descargar el archivo CSV
            const blob = new Blob([csvContent], { type: "text/csv;charset=utf-8;" });
            const link = document.createElement("a");
            link.href = URL.createObjectURL(blob);
            link.download = "datos_filtrados.csv";
            link.click();
        }

        // Función para agregar una nueva fila a la tabla
        function agregarFila() {
            const tablaBody = document.getElementById("csvTableBody");
            const nuevaFila = document.createElement("tr");

            const columnas = [
                "F000", "1", "Enero 2024", "0", "15/01/2024", "15/02/2024", "Pagada", "CardioDance"
            ];

            columnas.forEach(() => {
                const celda = document.createElement("td");
                celda.contentEditable = true;
                nuevaFila.appendChild(celda);
            });

            const celdaAcciones = document.createElement("td");
            const botonGuardar = document.createElement("button");
            botonGuardar.textContent = "Guardar";
            botonGuardar.onclick = () => guardarCambios(nuevaFila, columnas);
            celdaAcciones.appendChild(botonGuardar);
            nuevaFila.appendChild(celdaAcciones);

            tablaBody.appendChild(nuevaFila);
        }

                // Función para redirigir al menú de administración
                private void VolverAlMenu()
        {
            Navigation.NavigateTo("/Administrador"); // Redirige a la página del Administrador
        }
    </script>

</body>

</html>

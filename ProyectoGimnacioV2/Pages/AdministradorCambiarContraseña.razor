
@page "/AdministradorCambiarContraseña"
@using System.ComponentModel.DataAnnotations
@inject NavigationManager Navigation
@using ProyectoGimnacioV2.Clases  

<h2>Cambiar Contraseña</h2>

<EditForm Model="@passwordModel" OnValidSubmit="ChangePassword">
    <div>
        <label for="clientId">ID de Cliente:</label>
        <InputText id="clientId" @bind-Value="passwordModel.ClientId" />
        <ValidationMessage For="@(() => passwordModel.ClientId)" />
        <button type="button" class="btn btn-primary mt-2" @onclick="SearchClient">Buscar ID</button>
    </div>

    <div>
        <label for="clientName">Nombre del Cliente:</label>
        <InputText id="clientName" @bind-Value="passwordModel.ClientName" Disabled="true" />
    </div>

    <div>
        <label for="currentPassword">Contraseña Actual:</label>
        <InputText id="currentPassword" type="@currentPasswordType" @bind-Value="passwordModel.CurrentPassword" Disabled="true" />
        <ValidationMessage For="@(() => passwordModel.CurrentPassword)" />
        <button type="button" class="btn btn-link" @onclick="TogglePasswordVisibility">Ver Contraseña</button>
    </div>

    <div>
        <label for="newPassword">Nueva Contraseña:</label>
        <InputText id="newPassword" type="password" @bind-Value="passwordModel.NewPassword" />
        <ValidationMessage For="@(() => passwordModel.NewPassword)" />
        <button type="submit" class="btn btn-success mt-2">Cambiar Contraseña</button>
    </div>
</EditForm>

@if (!string.IsNullOrEmpty(message))
{
    <p>@message</p>
}

<!-- Botón para ir a la página Administrador -->
<button class="btn btn-secondary mt-3" @onclick="GoToAdministrador">Ir a Administrador</button>

@code {
    private PasswordModel passwordModel = new PasswordModel();
    private string message = string.Empty;
    private Usuario currentUser = null;
    private string currentPasswordType = "password";  // Controla el tipo del campo para la contraseña

    private void ChangePassword()
    {
        if (currentUser == null)
        {
            message = "Debe buscar y seleccionar un cliente antes de cambiar la contraseña.";
            return;
        }

        if (passwordModel.NewPassword.Length < 6)
        {
            message = "La nueva contraseña debe tener al menos 6 caracteres.";
            return;
        }

        // Cambiar la contraseña del usuario en la lista
        var user = Usuarios.ListaUsuarios.FirstOrDefault(u => u.ClientId == passwordModel.ClientId);
        if (user != null)
        {
            user.Password = passwordModel.NewPassword;  // Cambiar la contraseña en el objeto Usuario
            message = "Contraseña actualizada exitosamente.";
        }
        else
        {
            message = "Cliente no encontrado en la lista.";
        }
    }


    private void SearchClient()
    {
        // Buscar cliente por ID en la lista de usuarios
        currentUser = Usuarios.ListaUsuarios.FirstOrDefault(u => u.ClientId == passwordModel.ClientId);

        if (currentUser != null)
        {
            passwordModel.ClientName = currentUser.ClientName;
            passwordModel.CurrentPassword = currentUser.Password;  // Mostrar la contraseña actual
            message = "Cliente encontrado.";
        }
        else
        {
            passwordModel.ClientName = string.Empty;
            passwordModel.CurrentPassword = string.Empty;  // Borrar la contraseña si no se encuentra
            message = "Cliente no encontrado.";
            currentUser = null;
        }
    }

    private void TogglePasswordVisibility()
    {
        // Cambia el tipo del campo para mostrar u ocultar la contraseña
        currentPasswordType = currentPasswordType == "password" ? "text" : "password";
    }

    private void GoToAdministrador()
    {
        // Redirige al componente Administrador
        Navigation.NavigateTo("/Administrador");
    }

    public class PasswordModel
    {
        [Required(ErrorMessage = "El ID de cliente es obligatorio.")]
        public string ClientId { get; set; }

        public string ClientName { get; set; }

        [Required(ErrorMessage = "La contraseña actual es obligatoria.")]
        public string CurrentPassword { get; set; }

        [Required(ErrorMessage = "La nueva contraseña es obligatoria.")]
        [MinLength(6, ErrorMessage = "La nueva contraseña debe tener al menos 6 caracteres.")]
        public string NewPassword { get; set; }
    }
}

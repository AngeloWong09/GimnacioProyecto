
@page "/AdministradorCambiarContraseña"

<!DOCTYPE html>
<html>
<head>
    <title>Bienvenido a GYM FAST FORCE!</title>
    <link rel="stylesheet" href="styles.css" />
</head>
<body>
    <h1 class="title">Bienvenido a GYM FAST FORCE</h1>

    <!-- Botones para mostrar los diferentes CSV -->
    <div>
        <button onclick="mostrarDatos('Administrador')">Mostrar Administradores</button>
        <button onclick="mostrarDatos('Cliente')">Mostrar Clientes</button>
        <button onclick="mostrarDatos('Entrenadores')">Mostrar Entrenadores</button>
    </div>
    <br />

    <h2>Editar Datos CSV</h2>
    <p>Haz clic en los campos de la tabla para editar.</p>

    <!-- Tabla donde se mostrarán los datos -->
    <table id="csvTable" border="1" style="width: 100%; border-collapse: collapse;">
        <thead>
            <tr>
                <th>Usuario</th>
                <th>Contraseña</th>
                <th>Nombre</th>
                <th>Apellido</th>
                <th>ID</th>
                <th>Acciones</th> <!-- Columna para botones Editar/Guardar -->
            </tr>
        </thead>
        <tbody id="csvTableBody"></tbody>
    </table>

    <br />

    <!-- Botón para guardar el CSV -->
    <div>
        <button onclick="guardarCSV()">Guardar Tabla como CSV</button>
    </div>

    <br />

    <p id="currentTime"></p>
    <script src="script.js"></script>

    <script>
        let datosCSV = []; // Para almacenar los datos del CSV
        let encabezadoCSV = []; // Para almacenar el encabezado del CSV

        // Función para cargar los datos de los CSV de Administrador, Cliente, o Entrenadores
        async function cargarCSV(tipo) {
            let ruta;
            if (tipo === 'Administrador') {
                ruta = '/sample-data/Administrador.csv';
            } else if (tipo === 'Cliente') {
                ruta = '/sample-data/Cliente.csv';
            } else if (tipo === 'Entrenadores') {
                ruta = '/sample-data/Entrenadores.csv';
            }

            try {
                const respuesta = await fetch(ruta); // Ruta al archivo CSV correspondiente
                if (!respuesta.ok) {
                    alert("No se pudo cargar el archivo " + tipo + ".csv.");
                    return;
                }
                const contenido = await respuesta.text(); // Lee el contenido del archivo
                procesarCSVTexto(contenido, tipo); // Procesa el contenido del CSV
            } catch (error) {
                alert("Hubo un problema al cargar el archivo.");
                console.error("Error al cargar el archivo", error);
            }
        }

        // Función para procesar el contenido del CSV en líneas y columnas
        function procesarCSVTexto(texto, tipo) {
            const lineas = texto.split("\n").filter((linea, index) => {
                // Omite la primera línea (encabezado) y las líneas vacías
                return index > 0 && linea.trim() !== "";
            });

            // Guarda la primera línea como encabezado
            encabezadoCSV = texto.split("\n")[0].trim();

            datosCSV = lineas.map(linea => linea.split(";")); // Divide las líneas en columnas

            // Dependiendo del tipo, ajusta los encabezados para las tablas
            let headers = ["Usuario", "Contraseña", "Nombre", "Apellido", "ID"];
            if (tipo === 'Entrenadores') {
                headers.push("Puntos fuertes");
            }

            // Actualiza la tabla
            const tablaBody = document.getElementById("csvTableBody");
            tablaBody.innerHTML = ""; // Limpiar la tabla
            datosCSV.forEach(fila => {
                const filaTabla = document.createElement("tr");

                fila.forEach((columna, index) => {
                    const celda = document.createElement("td");
                    celda.contentEditable = true; // Hacer editable
                    celda.textContent = columna.trim();
                    filaTabla.appendChild(celda);
                });

                const celdaAcciones = document.createElement("td");
                const botonGuardar = document.createElement("button");
                botonGuardar.textContent = "Guardar";
                botonGuardar.onclick = function () { guardarCambios(filaTabla, fila); };
                celdaAcciones.appendChild(botonGuardar);
                filaTabla.appendChild(celdaAcciones);

                tablaBody.appendChild(filaTabla);
            });
        }

        // Función para mostrar los datos en la tabla
        function mostrarDatos(tipo) {
            cargarCSV(tipo); // Cargar los datos del tipo seleccionado (Administrador, Cliente o Entrenador)
        }

        // Función para guardar los cambios en una fila
        function guardarCambios(fila, columnas) {
            const celdas = fila.querySelectorAll("td");

            // Guardar los valores de las celdas editadas en el array
            for (let i = 0; i < celdas.length - 1; i++) { // Excluir la última celda de "acciones"
                columnas[i] = celdas[i].textContent.trim();
            }

            alert("Cambios guardados.");

            const filaIndex = datosCSV.findIndex((item) => item[4] === columnas[4]); // Usar el ID para encontrar la fila correcta
            if (filaIndex > -1) {
                datosCSV[filaIndex] = columnas; // Actualiza los datos
            }
        }

        // Función para guardar los datos de la tabla como archivo CSV
        function guardarCSV() {
            let csvContent = encabezadoCSV + "\n"; // Incluye el encabezado original

            // Generar CSV a partir de los datos almacenados
            datosCSV.forEach(filaData => {
                csvContent += filaData.join(";") + "\n";
            });

            // Crear un archivo blob y descargarlo
            const blob = new Blob([csvContent], { type: "text/csv;charset=utf-8;" });
            const link = document.createElement("a");
            link.href = URL.createObjectURL(blob);
            link.download = "datos_guardados.csv";
            link.click();
        }
    </script>
</body>
</html>




@page "/AdministradorCambiarContraseña"

<!DOCTYPE html>
<html lang="es">
  <!-- Definimos el lenguaje para la página en español -->

<head>
    <meta charset="UTF-8">  <!-- Definimos la codificación de caracteres en UTF-8 -->
    <meta name="viewport" content="width=device-width, initial-scale=1.0">  <!-- Diseño responsivo -->
    <title>Bienvenido a GYM FAST FORCE!</title>  <!-- Título de la página visible en la pestaña -->
    <link rel="stylesheet" href="styles.css" />  <!-- Vinculación de archivo CSS -->
</head>

<body>

    <!-- Botón Volver al Menú -->
    <div>
        <a href="/Administrador" class="btn-primary">Volver al Menú</a>  <!-- Redirige a la página de Administrador.razor -->
    </div>

    <h1 class="title">Bienvenido a GYM FAST FORCE</h1>  <!-- Título visible al usuario -->
    <!-- Contenedor de botones para cargar diferentes tipos de CSV -->
    <div>
        <button onclick="mostrarDatos('Administrador')">Mostrar Administradores</button>
        <button onclick="mostrarDatos('Cliente')">Mostrar Clientes</button>
        <button onclick="mostrarDatos('Entrenadores')">Mostrar Entrenadores</button>
    </div>
    <br />

    <h2>Editar Datos CSV</h2>
    <p>Haz clic en los campos de la tabla para editar.</p>

    <!-- Tabla para mostrar los datos CSV cargados -->
    <table id="csvTable" border="1" style="width: 100%; border-collapse: collapse;">
        <thead>
            <tr>
                <th>Usuario</th>
                <th>Contraseña</th>
                <th>Nombre</th>
                <th>Apellido</th>
                <th>ID</th>
                <th>Acciones</th>  <!-- Columna para botones "Editar" y "Guardar" -->
            </tr>
        </thead>
        <tbody id="csvTableBody"></tbody>  <!-- Aquí se cargarán las filas del CSV -->
    </table>

    <br />

    <!-- Botón para guardar los datos como un archivo CSV -->
    <div>
        <button onclick="guardarCSV()">Guardar Tabla como CSV</button>
    </div>

    <br />

    <!-- Botón Volver al Menú -->
    <div>
        <button onclick="volverAlMenu()">Volver al Menú</button>  <!-- Llama a la función volverAlMenu() -->
    </div>

    <br />

    <p id="currentTime"></p> <!-- Muestra la hora actual -->

    <script src="script.js"></script>  <!-- Vinculación de script JavaScript -->

    <script>
        // Arreglo para almacenar los datos del CSV y su encabezado
        let datosCSV = [];
        let encabezadoCSV = [];

        // Cargar un archivo CSV específico basado en el tipo (Administrador, Cliente, Entrenador)
        async function cargarCSV(tipo) {
            let ruta;
            if (tipo === 'Administrador') {
                ruta = '/sample-data/Administrador.csv';  // Ruta para Administrador
            } else if (tipo === 'Cliente') {
                ruta = '/sample-data/Cliente.csv';  // Ruta para Cliente
            } else if (tipo === 'Entrenadores') {
                ruta = '/sample-data/Entrenadores.csv';  // Ruta para Entrenadores
            }

            try {
                const respuesta = await fetch(ruta);  // Intenta cargar el archivo CSV
                if (!respuesta.ok) {
                    alert("No se pudo cargar el archivo " + tipo + ".csv.");  // Mensaje de error si la carga falla
                    return;
                }
                const contenido = await respuesta.text();  // Lee el contenido del CSV
                procesarCSVTexto(contenido, tipo);  // Procesa el texto y lo carga en la tabla
            } catch (error) {
                alert("Hubo un problema al cargar el archivo.");  // Mensaje de error en caso de fallo
                console.error("Error al cargar el archivo", error);  // Muestra el error en la consola
            }
        }

        // Procesa el contenido CSV para dividirlo en líneas y columnas
        function procesarCSVTexto(texto, tipo) {
            const lineas = texto.split("\n").filter((linea, index) => {
                // Omite la primera línea (encabezado) y líneas vacías
                return index > 0 && linea.trim() !== "";
            });

            // Guarda el encabezado del CSV (primera línea)
            encabezadoCSV = texto.split("\n")[0].trim();

            // Divide las líneas por el delimitador ";" y guarda las filas
            datosCSV = lineas.map(linea => linea.split(";"));

            // Definir los encabezados para la tabla dependiendo del tipo de datos
            let headers = ["Usuario", "Contraseña", "Nombre", "Apellido", "ID"];
            if (tipo === 'Entrenadores') {
                headers.push("Puntos fuertes");  // Agregar columna extra para Entrenadores
            }

            // Actualiza la tabla en el DOM con los nuevos datos
            actualizarTabla(headers);
        }

        // Actualiza el contenido de la tabla con los nuevos datos
        function actualizarTabla(headers) {
            const tablaBody = document.getElementById("csvTableBody");
            tablaBody.innerHTML = "";  // Limpiar tabla antes de cargar datos nuevos

            datosCSV.forEach(fila => {
                const filaTabla = document.createElement("tr");  // Crea una nueva fila en la tabla

                // Por cada celda en la fila, crea una celda editable
                fila.forEach((columna, index) => {
                    const celda = document.createElement("td");
                    celda.contentEditable = true;  // Hacer la celda editable
                    celda.textContent = columna.trim();  // Asignar el valor de la celda
                    filaTabla.appendChild(celda);  // Agregar la celda a la fila
                });

                // Crear la celda de "Acciones" para los botones de guardar
                const celdaAcciones = document.createElement("td");
                const botonGuardar = document.createElement("button");
                botonGuardar.textContent = "Guardar";  // Etiqueta del botón
                botonGuardar.onclick = function () { guardarCambios(filaTabla, fila); };  // Función para guardar cambios
                celdaAcciones.appendChild(botonGuardar);
                filaTabla.appendChild(celdaAcciones);  // Agregar la celda de acciones a la fila

                tablaBody.appendChild(filaTabla);  // Agregar la fila al cuerpo de la tabla
            });
        }

        // Función para mostrar los datos en la tabla dependiendo del tipo (Administrador, Cliente, Entrenador)
        function mostrarDatos(tipo) {
            cargarCSV(tipo);  // Llama a la función de carga con el tipo de datos solicitado
        }

        // Guarda los cambios hechos en una fila de la tabla
        function guardarCambios(fila, columnas) {
            const celdas = fila.querySelectorAll("td");

            // Actualizar las columnas con los valores editados de la tabla
            for (let i = 0; i < celdas.length - 1; i++) {
                columnas[i] = celdas[i].textContent.trim();
            }

            alert("Cambios guardados.");  // Notificar al usuario que los cambios se guardaron

            const filaIndex = datosCSV.findIndex((item) => item[4] === columnas[4]);  // Buscar la fila por ID
            if (filaIndex > -1) {
                datosCSV[filaIndex] = columnas;  // Actualizar los datos en el arreglo
            }
        }

        // Función para guardar todos los datos en la tabla como un archivo CSV
        function guardarCSV() {
            let csvContent = encabezadoCSV + "\n";  // Comienza con el encabezado original

            // Concatenar todas las filas de datos en formato CSV
            datosCSV.forEach(filaData => {
                csvContent += filaData.join(";") + "\n";
            });

            // Crear un archivo Blob con el contenido CSV y generar un enlace de descarga
            const blob = new Blob([csvContent], { type: "text/csv;charset=utf-8;" });
            const link = document.createElement("a");
            link.href = URL.createObjectURL(blob);
            link.download = "datos_guardados.csv";  // Nombre del archivo CSV
            link.click();  // Activar la descarga
        }


    
    </script>
</body>
</html>

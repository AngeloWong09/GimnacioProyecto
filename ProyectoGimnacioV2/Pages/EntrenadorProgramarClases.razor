<!-- Cambiar toda la logica para que presente las clases -->
@page "/EntrenadorProgramarClases"

<!DOCTYPE html>
<html>
<head>
    <!-- Configuración básica del documento -->
    <title>Bienvenido a GYM FAST FORCE!</title>
    <link rel="stylesheet" href="styles.css" />
</head>
<body>
    <!-- Título de la página -->
    <h1 class="title">Bienvenido a GYM FAST FORCE</h1>

    <!-- Sección de opciones para administrar clases -->
    <h2>Administrar Clases</h2>
    <div>
        <!-- Botón para agregar una nueva clase -->
        <button onclick="agregarClase()">Agregar Nueva Clase</button>

        <!-- Botón para guardar las clases como archivo CSV -->
        <button onclick="guardarCSV()">Guardar Tabla como CSV</button>

        <!-- Botón para regresar al menú principal -->
        <button onclick="location.href='/Entrenador'" class="return-btn">Volver al Menú</button>
    </div>
    <br />

    <!-- Formulario para agregar nuevas clases -->
    <h3>Agregar Clase</h3>
    <div>
        <label for="idEntrenador">ID Entrenador:</label>
        <input type="text" id="idEntrenador" placeholder="Ej: 1237894">

        <label for="clase">Clase:</label>
        <input type="text" id="clase" placeholder="Ej: Zumba">

        <label for="fecha">Fecha:</label>
        <input type="date" id="fecha">

        <label for="horario">Horario:</label>
        <input type="time" id="horario">

        <label for="precio">Precio Clase:</label>
        <input type="text" id="precio" placeholder="Ej: $2500">
    </div>
    <br />

    <!-- Tabla para listar las clases ingresadas -->
    <h3>Clases Ingresadas</h3>
    <table id="clasesTable" border="1" style="width: 100%; border-collapse: collapse;">
        <thead>
            <tr>
                <th>ID Clase</th>
                <th>ID Entrenador</th>
                <th>Clase</th>
                <th>Fecha</th>
                <th>Horario</th>
                <th>Precio Clase</th>
                <th>Acciones</th>
            </tr>
        </thead>
        <tbody id="clasesTableBody"></tbody> <!-- Contenedor dinámico para agregar filas -->
    </table>

    <script>
        // **Arreglo principal para almacenar las clases ingresadas**
        let clases = [];

        /**
         * Generar un ID único para cada clase.
         *
         * - Mantiene base estática 497670.
         * - Incrementa aleatoriamente con un máximo de 1000.
         */
        function generarIdClase() {
            return 497670 + Math.floor(Math.random() * 1000);
        }

        /**
         * Agregar una nueva clase al sistema.
         *
         * - Verifica que todos los campos sean válidos.
         * - Genera automáticamente un ID para la clase.
         * - Actualiza el arreglo principal `clases`.
         * - Refleja los datos en la tabla visual.
         */
        function agregarClase() {
            const idEntrenador = document.getElementById('idEntrenador').value.trim();
            const clase = document.getElementById('clase').value.trim();
            const fecha = document.getElementById('fecha').value.trim();
            const horario = document.getElementById('horario').value.trim();
            const precio = document.getElementById('precio').value.trim();

            if (!idEntrenador || !clase || !fecha || !horario || !precio) {
                alert("Por favor, llena todos los campos.");
                return; // Salir si falta algún campo
            }

            const idClase = generarIdClase();

            // Agregar la clase al arreglo de clases
            clases.push({
                idClase: idClase,
                idEntrenador: idEntrenador,
                clase: clase,
                fecha: fecha,
                horario: horario,
                precio: precio
            });

            mostrarClases(); // Actualizar la tabla visual
        }

        /**
         * Mostrar las clases almacenadas en la tabla visual.
         *
         * - Recorre el arreglo `clases` para construir dinámicamente las filas.
         * - Borra cualquier dato previo en la tabla antes de renderizar.
         */
        function mostrarClases() {
            const tablaBody = document.getElementById('clasesTableBody');
            tablaBody.innerHTML = ""; // Limpiar las filas existentes

            clases.forEach((clase) => {
                // Crear una nueva fila
                const fila = document.createElement("tr");

                // Renderizar las celdas con los datos
                fila.innerHTML = `
                            <td>${clase.idClase}</td>
                            <td>${clase.idEntrenador}</td>
                            <td>${clase.clase}</td>
                            <td>${clase.fecha}</td>
                            <td>${clase.horario}</td>
                            <td>${clase.precio}</td>
                            <td><button onclick="editarClase(${clase.idClase})">Editar</button></td>
                        `;

                tablaBody.appendChild(fila); // Agregar la fila completa al cuerpo de la tabla
            });
        }

        /**
         * Rellenar el formulario con los datos de una clase específica para su edición.
         *
         * - Busca la clase mediante su ID.
         * - Los campos del formulario se llenan con los valores actuales.
         */
        function editarClase(idClase) {
            const clase = clases.find(c => c.idClase === idClase);

            if (clase) {
                // Rellenar formulario con datos existentes
                document.getElementById('idEntrenador').value = clase.idEntrenador;
                document.getElementById('clase').value = clase.clase;
                document.getElementById('fecha').value = clase.fecha;
                document.getElementById('horario').value = clase.horario;
                document.getElementById('precio').value = clase.precio;
            }
        }

        /**
         * Guardar las clases ingresadas como archivo CSV descargable.
         *
         * - Crea un encabezado con los nombres de las columnas.
         * - Recorre el arreglo `clases` para incluir todas las filas.
         * - Descarga el archivo automáticamente al cliente.
         */
        function guardarCSV() {
            // Encabezados de la tabla CSV
            let csvContent = "IDClase,IDEntrenador,Clase,Fecha,Horario,PrecioClase\n";

            // Construir contenido CSV a partir del arreglo `clases`
            clases.forEach(clase => {
                csvContent += `${clase.idClase},${clase.idEntrenador},${clase.clase},${clase.fecha},${clase.horario},${clase.precio}\n`;
            });

            // Crear un archivo Blob y descargarlo automáticamente
            const blob = new Blob([csvContent], { type: "text/csv;charset=utf-8;" });
            const link = document.createElement("a");
            link.href = URL.createObjectURL(blob);
            link.download = "Clases_guardadas.csv"; // Nombre sugerido para el archivo
            link.click();
        }

        /**
         * Función para cargar el archivo CSV más reciente, evitando el caché.
         *
         * - Agrega un parámetro de consulta con un timestamp a la URL.
         * - Asegura que el navegador descargue la versión más reciente.
         */
        function cargarCSV() {
            const archivoCSV = 'sample-data/Clases.csv'; // Ruta del archivo CSV
            const urlConCache = `${archivoCSV}?t=${new Date().getTime()}`; // Añadir timestamp para evitar caché

            fetch(urlConCache)
                .then(response => response.text())
                .then(contenido => {
                    const lineas = contenido.split("\n");
                    const tablaBody = document.getElementById("clasesTableBody");
                    tablaBody.innerHTML = "";

                    lineas.forEach((linea, index) => {
                        if (linea.trim() === "" || index === 0) return; // Ignorar la primera línea (encabezados)
                        const columnas = linea.split(",");
                        const fila = document.createElement("tr");

                        columnas.forEach(columna => {
                            const celda = document.createElement("td");
                            celda.textContent = columna.trim();
                            fila.appendChild(celda);
                        });

                        tablaBody.appendChild(fila);
                    });
                })
                .catch(error => {
                    console.error("Error al cargar el archivo CSV", error);
                });
        }
    </script>
</body>
</html>

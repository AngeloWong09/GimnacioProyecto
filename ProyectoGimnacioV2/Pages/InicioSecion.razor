
<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Bienvenido a GYM FAST FORCE</title>
    <link rel="stylesheet" href="styles.css" />
</head>
<body>
    <h1 class="title">Bienvenido a GYM FAST FORCE</h1>

    <h2>Inicio de sesión</h2>
    <form id="loginForm" onsubmit="return login(event)">
        <div class="form-group">
            <label for="user">Usuario:</label>
            <input type="text" id="user" required />
        </div>
        <div class="form-group">
            <label for="password">Contraseña:</label>
            <input type="password" id="password" required />
        </div>
        <button type="submit">Login</button>
    </form>

   
    <div id="notification" style="font-weight: bold;"></div>

    <script>
        // Maneja el inicio de sesión
        async function login(event) {
            event.preventDefault(); // Previene el envío del formulario

            const user = document.getElementById("user").value.trim();
            const password = document.getElementById("password").value.trim();

            // Cargar y procesar los archivos CSV
            const administradores = await cargarCSV('administrador');
            const entrenadores = await cargarCSV('entrenador');
            const clientes = await cargarCSV('cliente');

            if (!administradores || administradores.length === 0) {
                mostrarNotificacion("No se pudo cargar el archivo Administrador.csv.", "blue");
                return;
            }

            if (!entrenadores || entrenadores.length === 0) {
                mostrarNotificacion("No se pudo cargar el archivo Entrenadores.csv.", "blue");
                return;
            }

            if (!clientes || clientes.length === 0) {
                mostrarNotificacion("No se pudo cargar el archivo Cliente.csv.", "blue");
                return;
            }

            // Verificar credenciales
            const administradorValido = administradores.some(fila => fila[0] === user && fila[1] === password);
            const entrenadorValido = entrenadores.some(fila => fila[0] === user && fila[1] === password);
            const clienteValido = clientes.some(fila => fila[0] === user && fila[1] === password);

            if (administradorValido) {
                mostrarNotificacion("¡Inicio de sesión exitoso como Administrador! Redirigiendo...", "green");
                setTimeout(() => {
                    window.location.href = "/Administrador"; // Redirige a la sección del administrador
                }, 1000);
            } else if (entrenadorValido) {
                mostrarNotificacion("¡Inicio de sesión exitoso como Entrenador! Redirigiendo...", "green");
                setTimeout(() => {
                    window.location.href = "/Entrenador"; // Redirige a la sección del entrenador
                }, 1000);
            } else if (clienteValido) {
                mostrarNotificacion("¡Inicio de sesión exitoso como Cliente! Redirigiendo...", "green");
                setTimeout(() => {
                    window.location.href = "/Cliente"; // Redirige a la sección del cliente
                }, 1000);
            } else {
                mostrarNotificacion("Usuario o contraseña incorrectos.", "red");
            }
        }

        // Función para cargar y procesar el archivo CSV
        async function cargarCSV(tipo) {
            try {
                const url = tipo === 'administrador' ? "/sample-data/Administrador.csv" :
                    tipo === 'entrenador' ? "/sample-data/Entrenadores.csv" : "/sample-data/Cliente.csv";
                const respuesta = await fetch(url); // Ruta al archivo CSV
                if (!respuesta.ok) {
                    mostrarNotificacion(`El archivo ${tipo}.csv no fue encontrado.`, "blue");
                    return [];
                }

                const texto = await respuesta.text(); // Lee el contenido del archivo
                return procesarCSVTexto(texto); // Procesa el CSV como texto
            } catch (error) {
                mostrarNotificacion(`Error al cargar el archivo ${tipo}.csv.`, "blue");
                console.error("Error:", error);
                return [];
            }
        }

        // Procesa el contenido del CSV en líneas y columnas
        function procesarCSVTexto(texto) {
            const lineas = texto.split("\n").filter(linea => linea.trim() !== ""); // Excluye líneas vacías
            return lineas.slice(1).map(linea => linea.replace(/\r/g, "").split(";")); // Elimina la cabecera y divide por ;
        }

        // Muestra un mensaje de notificación en la interfaz
        function mostrarNotificacion(mensaje, color) {
            const notificationDiv = document.getElementById("notification");
            notificationDiv.textContent = mensaje;
            notificationDiv.style.color = color;
        }
    </script>
</body>
</html>








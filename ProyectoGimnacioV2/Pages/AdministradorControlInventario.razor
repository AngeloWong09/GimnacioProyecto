@page "/AdministradorControlInventario"
<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>GYM FAST FORCE</title>
    <link rel="stylesheet" href="styles.css" />
</head>

<body>

    <!-- Título de la página -->
    <h1 class="title">GYM FAST FORCE</h1>

    <div>
        <!-- Botón para cargar el archivo CSV y mostrarlo -->
        <button onclick="mostrarTabla()">Mostrar Tabla de maquinas</button>
    </div>
    <br />

    <!-- Botón para guardar la tabla filtrada como archivo CSV -->
    <div>
        <button onclick="guardarCSV()">Guardar datos</button>
    </div>
    <br />

    <!-- Formulario para agregar nuevas líneas a la tabla -->
    <div class="formulario-nueva-linea">
        <input type="text" id="nombre" placeholder="Nombre" />
        <input type="text" id="fechaEntrada" placeholder="Fecha Entrada" />
        <input type="text" id="tiempoVida" placeholder="Tiempo Vida" />
        <input type="text" id="ingresos" placeholder="Ingresos" />
        <input type="text" id="claseID" placeholder="Clase ID" />
        <input type="text" id="id" placeholder="ID" />
        <button onclick="agregarLinea()">Agregar Línea</button>
    </div>

    <br />

    <!-- Botón para mostrar el ingreso más alto y el más bajo -->
    <div>
        <button onclick="filtrarIngresos()">Mostrar Ingreso Más Alto y Más Bajo</button>
    </div>
    <br />

    <!-- Elemento para mostrar los resultados del filtro -->
    <div id="ingresoResultados" class="resultado-cuadro"></div>

    <p>Haz clic en los campos de la tabla para editar.</p>

    <!-- Tabla para mostrar los datos del archivo CSV -->
    <table id="csvTable" border="1" style="width: 100%; border-collapse: collapse;">
        <thead>
            <tr>
                <th>Nombre</th>
                <th>Fecha Entrada</th>
                <th>Tiempo Vida (días)</th>
                <th>Ingresos</th>
                <th>Clase ID</th>
                <th>ID</th>
                <th>Acciones</th> <!-- Columna para botones Editar/Guardar -->
            </tr>
        </thead>
        <tbody id="csvTableBody"></tbody>
    </table>

    <br />

    <!-- Botón para regresar al menú del Administrador -->
    <div>
        <a href="/Administrador" class="btn-primary">Volver al Menú</a>
    </div>

    <p id="currentTime"></p>

    <script>
        let datosCSV = []; // Array para almacenar los datos del archivo CSV

        /**
         * Carga y muestra el contenido del archivo CSV en la tabla HTML
         * Añade un timestamp a la URL del archivo para evitar caché.
         */
        function mostrarTabla() {
            const url = '/sample-data/Maquinas.csv?' + new Date().getTime(); // Evitar caché

            // Realizar la solicitud para obtener el archivo CSV
            fetch(url)
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Error al cargar el archivo CSV');
                    }
                    return response.text();
                })
                .then(contenido => {
                    // Procesamos el contenido del CSV
                    const lineas = contenido.split("\n");
                    const tablaBody = document.getElementById("csvTableBody");
                    tablaBody.innerHTML = ""; // Limpiar tabla
                    datosCSV = []; // Limpiar los datos actuales

                    lineas.forEach((linea, index) => {
                        if (linea.trim() === "" || index === 0) return; // Ignorar líneas vacías o encabezado

                        const columnas = linea.split(","); // Dividir en columnas
                        datosCSV.push(columnas); // Almacenar los datos en el arreglo

                        // Crear la fila de la tabla
                        const fila = document.createElement("tr");

                        columnas.forEach((columna) => {
                            const celda = document.createElement("td");
                            celda.contentEditable = true; // Hacer la celda editable
                            celda.textContent = columna.trim();
                            fila.appendChild(celda);
                        });

                        // Aplicar color según "Tiempo Vida" en la celda
                        const tiempoVida = parseInt(columnas[2]);
                        const tiempoVidaCell = fila.children[2];
                        aplicarColorTiempoVida(tiempoVida, tiempoVidaCell); // Función que establece el color

                        // Agregar la celda de acciones (guardar)
                        const celdaAcciones = document.createElement("td");
                        const botonGuardar = document.createElement("button");
                        botonGuardar.textContent = "Guardar";
                        botonGuardar.onclick = function () {
                            guardarCambios(fila, columnas); // Función para guardar cambios
                        };
                        celdaAcciones.appendChild(botonGuardar);
                        fila.appendChild(celdaAcciones);

                        tablaBody.appendChild(fila); // Añadir la fila a la tabla
                    });
                })
                .catch(error => {
                    alert("Hubo un problema al cargar el archivo Maquinas.csv.");
                    console.error("Error:", error);
                });
        }

        /**
         * Guarda los cambios realizados en una fila
         */
        function guardarCambios(fila, columnas) {
            const celdas = fila.querySelectorAll("td");

            // Actualiza los datos según los cambios de la tabla
            for (let i = 0; i < celdas.length - 1; i++) {
                columnas[i] = celdas[i].textContent.trim();
            }

            alert("Cambios guardados.");

            // Encontrar la fila correspondiente para actualizar datos
            const filaIndex = datosCSV.findIndex((item) => item[5] === columnas[5]);
            if (filaIndex > -1) {
                datosCSV[filaIndex] = columnas; // Actualizar la fila
            }
        }

        /**
         * Guarda los datos de la tabla actual como un archivo CSV
         */
        function guardarCSV() {
            let csvContent = "Nombre,FechaEntrada,TiempoVida,Ingresos,Clase ID,ID\n";

            // Concatenar las filas de datos CSV
            datosCSV.forEach(filaData => {
                csvContent += filaData.join(",") + "\n";
            });

            // Crear un archivo CSV para descargar
            const blob = new Blob([csvContent], { type: "text/csv;charset=utf-8;" });
            const link = document.createElement("a");
            link.href = URL.createObjectURL(blob);
            link.download = "Maquinas_guardadas.csv";
            link.click();
        }

        /**
         * Agrega una nueva línea de datos a la tabla y al arreglo CSV
         */
        function agregarLinea() {
            const nombre = document.getElementById("nombre").value.trim();
            const fechaEntrada = document.getElementById("fechaEntrada").value.trim();
            const tiempoVida = document.getElementById("tiempoVida").value.trim();
            const ingresos = document.getElementById("ingresos").value.trim();
            const claseID = document.getElementById("claseID").value.trim();
            const id = document.getElementById("id").value.trim();

            if (!nombre || !fechaEntrada || !tiempoVida || !ingresos || !claseID || !id) {
                alert("Por favor completa todos los campos.");
                return;
            }

            // Crear la nueva fila con los datos ingresados
            const nuevaFila = [nombre, fechaEntrada, tiempoVida, ingresos, claseID, id];
            datosCSV.push(nuevaFila);

            const tablaBody = document.getElementById("csvTableBody");
            const fila = document.createElement("tr");

            nuevaFila.forEach((columna) => {
                const celda = document.createElement("td");
                celda.textContent = columna;
                fila.appendChild(celda);
            });

            // Aplicar color según el valor de "Tiempo Vida"
            const tiempoVidaValue = parseInt(nuevaFila[2]);
            const tiempoVidaCell = fila.children[2];
            aplicarColorTiempoVida(tiempoVidaValue, tiempoVidaCell);

            // Agregar botón de guardar
            const celdaAcciones = document.createElement("td");
            const botonGuardar = document.createElement("button");
            botonGuardar.textContent = "Guardar";
            botonGuardar.onclick = function () {
                guardarCambios(fila, nuevaFila);
            };
            celdaAcciones.appendChild(botonGuardar);
            fila.appendChild(celdaAcciones);

            tablaBody.appendChild(fila);

            // Limpiar los campos del formulario
            document.getElementById("nombre").value = "";
            document.getElementById("fechaEntrada").value = "";
            document.getElementById("tiempoVida").value = "";
            document.getElementById("ingresos").value = "";
            document.getElementById("claseID").value = "";
            document.getElementById("id").value = "";
        }

        /**
         * Filtra el CSV por ingresos, mostrando el más alto y el más bajo
         */
        function filtrarIngresos() {
            let ingresos = [];
            let nombreMaximo = "";
            let nombreMinimo = "";

            // Filtrar los ingresos y nombres de cada máquina
            datosCSV.forEach(fila => {
                const ingreso = parseFloat(fila[3].trim());
                if (!isNaN(ingreso)) {
                    ingresos.push({ ingreso: ingreso, nombre: fila[0] });
                }
            });

            if (ingresos.length > 0) {
                // Obtener ingreso máximo y mínimo
                const ingresoMaximo = Math.max(...ingresos.map(i => i.ingreso));
                const ingresoMinimo = Math.min(...ingresos.map(i => i.ingreso));

                nombreMaximo = ingresos.find(i => i.ingreso === ingresoMaximo).nombre;
                nombreMinimo = ingresos.find(i => i.ingreso === ingresoMinimo).nombre;

                // Mostrar los resultados en el cuadro de resultados
                const resultadoElement = document.getElementById("ingresoResultados");
                resultadoElement.textContent = `Ingreso Más Alto: ${ingresoMaximo} (Máquina: ${nombreMaximo}) | Ingreso Más Bajo: ${ingresoMinimo} (Máquina: ${nombreMinimo})`;
            } else {
                alert("No se encontraron ingresos válidos.");
            }
        }

        /**
         * Asigna color de fondo a la celda basada en el valor de "Tiempo Vida"

         */
        function aplicarColorTiempoVida(tiempoVida, cell) {
            if (tiempoVida > 700) {
                cell.style.backgroundColor = "#D4F1C2"; // Verde suave
            } else if (tiempoVida >= 300 && tiempoVida <= 700) {
                cell.style.backgroundColor = "#FFE0A1"; // Naranja suave
            } else if (tiempoVida <= 0) {
                cell.style.backgroundColor = "#F6A7A7"; // Rojo suave
            }
        }
    </script>
</body>
</html>
